name: Build Production

on:
  push:
    branches:
      - 'main'

jobs:
  docker-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set .env
        run: if [ "${GITHUB_REF#refs/heads/}" == "main" ]; then (echo "${{ secrets.ENV_PROD }}" > .env); fi
      - name: Show .env
        run: cat .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # see: https://github.com/aws-actions/amazon-ecr-login
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker build
        run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.PROJECT_NAME }}:${{ github.sha }} .
      - name: Docker push
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.PROJECT_NAME }}:${{ github.sha }}

  deploy-production:
    needs: docker-push
    runs-on: ubuntu-latest
    container:
      image: nikolaik/python-nodejs:python3.9-nodejs18
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Aws cli
        run: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
      - name: Unzip AWS CLI
        run: unzip awscli-bundle.zip
      - name: AWS CLI
        run: ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - name: AWS Configure
        run: aws configure set default.region ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Npm install cloudformation
        run: npm install -g cfn-create-or-update
      - name: Cloudformation validate
        run: aws cloudformation validate-template --template-url https://upfunnels-cftemplates.s3.amazonaws.com/${{ secrets.PROJECT_NAME }}.yaml
      - name: Cloudformation
        run: cfn-create-or-update --stack-name prd-${{ secrets.PROJECT_NAME }} --region ${{ secrets.AWS_DEFAULT_REGION }} --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --template-url https://upfunnels-cftemplates.s3.amazonaws.com/${{ secrets.PROJECT_NAME }}.yaml --parameters ParameterKey=imagemFinal,ParameterValue=031078334487.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.PROJECT_NAME }}:${{ github.sha }} ParameterKey=nameContainer,ParameterValue=container-prd-${{ secrets.PROJECT_NAME }} ParameterKey=nameService,ParameterValue=service-prd-${{ secrets.PROJECT_NAME }} ParameterKey=nameApplication,ParameterValue=application-prd-${{ secrets.PROJECT_NAME }} ParameterKey=clusterARN,ParameterValue=arn:aws:ecs:us-east-1:031078334487:cluster/ecs-upfunnels-prd ParameterKey=clusterName,ParameterValue=ecs-upfunnels-prd ParameterKey=loadBalancerARN,ParameterValue=arn:aws:elasticloadbalancing:us-east-1:031078334487:listener/app/alb-upfunnels-prd/32a8b3fbb255272b/58a306075e2c9376 ParameterKey=CONFIGHostEndpoint,ParameterValue=upfunnels.com ParameterKey=CONFIGPriority,ParameterValue=2 ParameterKey=MemoryCustom,ParameterValue=4GB ParameterKey=CPUCustom,ParameterValue=2048 ParameterKey=VPCId,ParameterValue=vpc-0a4befabd436337e9 ParameterKey=AlarmNameIn,ParameterValue="Alarm +80% prd-${{ secrets.PROJECT_NAME }}" ParameterKey=AlarmNameOut,ParameterValue="Alarm -70% prd-${{ secrets.PROJECT_NAME }}" ParameterKey=SubnetA,ParameterValue=subnet-02aeab3e9297f24da ParameterKey=SubnetB,ParameterValue=subnet-0e061b716e270aec1 ParameterKey=SubnetC,ParameterValue=subnet-04cd9b7c200cf4cbe
